(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{375:function(n,s,a){"use strict";a.r(s);var t=a(14),e=Object(t.a)({},function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h2",{attrs:{id:"面向对象基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向对象基础","aria-hidden":"true"}},[n._v("#")]),n._v(" 面向对象基础")]),n._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[n._v("前言")]),n._v(" "),a("p",[n._v("什么是面向对象？面向对象是一种思想！（废话）。\n　　面向对象可以把程序中的关键模块都视为对象，而模块拥有属性及方法。这样我们如果把一些属性及方法封装起来，日后使用将非常方便，也可以避免繁琐重复的工作。接下来将为大家讲解在JS中面向对象的实现。\nlet's go")])]),n._v(" "),a("h2",{attrs:{id:"工厂模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工厂模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 工厂模式")]),n._v(" "),a("p",[n._v("工厂模式是软件工程领域一种广为人知的设计模式，而由于在ECMAScript中无法创建类，因此用函数封装以特定接口创建对象。其实现方法非常简单，也就是在函数内创建一个对象，给对象赋予属性及方法再将对象返回即可。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function createBlog(name, url) {\n  var o = new Object();\n  o.name = name;\n  o.url = url;\n  o.sayUrl= function() {\n    alert(this.url);\n  }\n  return o;\n}\n\nvar blog1 = createBlog('wuyuchang', 'http://www.jb51.net/');\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br")])]),a("p",[n._v("可以看到工厂模式的实现方法非常简单，解决了创建多个相似对象的问题，但是"),a("strong",[n._v("工厂模式却无从识别对象的类型")]),n._v("，因为全部都是Object，不像Date、Array等，因此出现了"),a("strong",[n._v("构造函数模式")]),n._v("。")]),n._v(" "),a("h2",{attrs:{id:"构造函数模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造函数模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 构造函数模式")]),n._v(" "),a("p",[n._v("ECMAScript中构造函数可以创建特定类型的对象，类似于Array、Date等原生JS的对象。其实现方法如下：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function Blog(name, url) {\n  this.name = name;\n  this.url = url;\n  this.alertUrl = function() {\n    alert(this.url);\n  }\n}\n\nvar blog = new Blog('wuyuchang', 'http://www.jb51.net/');\nconsole.log(blog instanceof Blog);  // true， 判断blog是否是Blog的实例，即解决了工厂模式中不能识别对象的类型\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br")])]),a("p",[a("strong",[n._v("这个例子与工厂模式中除了函数名不同以外，细心的童鞋应该发现许多不同之处：")])]),n._v(" "),a("ul",[a("li",[n._v("函数名首写字母为大写　　（虽然标准没有严格规定首写字母为大写，但按照惯例，构造函数的首写字母用大写")]),n._v(" "),a("li",[n._v("没有显示的创建对象")]),n._v(" "),a("li",[n._v("直接将属性和方法赋值给了this对象")]),n._v(" "),a("li",[n._v("没有return语句")]),n._v(" "),a("li",[n._v("使用new创建对象")]),n._v(" "),a("li",[n._v("能够识别对象（这正是构造函数模式胜于工厂模式的地方）")])]),n._v(" "),a("blockquote",[a("p",[n._v("构造函数虽然好用，但也并非没有缺点，使用构造函数的最大的问题在于每次创建实例的时候都要重新创建一次方法（理论上每次创建对象的时候对象的属性均不同，而对象的方法是相同的），然而创建两次完全相同的方法是没有必要的，因此，我们可以将函数移到对象外面。")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function Blog(name, url) {\n  this.name = name;\n  this.url = url;\n  this.alertUrl = alertUrl;\n}\n\nfunction alertUrl() {\n  alert(this.url);\n}\n\nvar blog = new Blog('scjb51', 'http://sc.jb51.net/'),\n  blog2 = new Blog('jb51', 'http://www.jb51.net/');\nblog.alertUrl();  // http://sc.jb51.net/\nblog2.alertUrl();  // http://www.jb51.net/\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br")])]),a("p",[n._v("我们将alertUrl设置成全局函数，这样一来blog与blog2访问的都是同一个函数，可是问题又来了，在全局作用域中定义了一个实际只想让Blog使用的函数，显示让全局作用域有些名副其实，更让人无法接受的是在全局作用域中定义了许多仅供特定对象使用的方法，浪费空间不说，显然失去了面向对象封装性了，因此可以通过原型来解决此问题。")]),n._v(" "),a("h2",{attrs:{id:"原型模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 原型模式")]),n._v(" "),a("p",[n._v("我们创建的每个函数都有prototype（原型）属性，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。使用原型对象的好处就是可以让所有对象实例共享它所包含的属性及方法。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function Blog() {\n}\n\nBlog.prototype.name = 'wuyuchang';\nBlog.prototype.url = 'http://tools.jb51.net/';\nBlog.prototype.friend = ['fr1', 'fr2', 'fr3', 'fr4'];\nBlog.prototype.alertInfo = function() {\n  alert(this.name + this.url + this.friend );\n}\n\n// 以下为测试代码\nvar blog = new Blog(),\n  blog2 = new Blog();\nblog.alertInfo();  // wuyuchanghttp://tools.jb51.net/fr1,fr2,fr3,fr4\nblog2.alertInfo();  // wuyuchanghttp://tools.jb51.net/fr1,fr2,fr3,fr4\n\nblog.name = 'wyc1';\nblog.url = 'http://***.com';\nblog.friend.pop();\nblog2.name = 'wyc2';\nblog2.url = 'http://+++.com';\nblog.alertInfo();  // wyc1http://***.comfr1,fr2,fr3\nblog2.alertInfo();  // wyc2http://+++.comfr1,fr2,fr3\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br")])]),a("p",[n._v("原型模式也不是没有缺点，首先，它省略了构造函数传递初始化参数这一环节，结果所有实例在默认情况下都取得了相同的属性值，这样非常不方便，但这还是不是原型的最大问题，原型模式的最大问题在于共享的本性所导致的，由于共享，因此一个实例修改了引用，另一个也随之更改了引用。因此我们通常不单独使用原型，而是结合原型模式与构造函数模式。")]),n._v(" "),a("h2",{attrs:{id:"混合模式（原型模式-构造函数模式）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#混合模式（原型模式-构造函数模式）","aria-hidden":"true"}},[n._v("#")]),n._v(" 混合模式（原型模式 + 构造函数模式）")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function Blog(name, url, friend) {\n  this.name = name;\n  this.url = url;\n  this.friend = friend;\n}\n\nBlog.prototype.alertInfo = function() {\n  alert(this.name + this.url + this.friend);\n}\n\nvar blog = new Blog('wuyuchang', 'http://tools.jb51.net/', ['fr1', 'fr2', 'fr3']),\n  blog2 = new Blog('wyc', 'http://**.com', ['a', 'b']);\n\nblog.friend.pop();\nblog.alertInfo();  // wuyuchanghttp://tools.jb51.net/fr1,fr2\nblog2.alertInfo();  // wychttp://**.coma,b\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br")])]),a("p",[n._v("混合模式中构造函数模式用于定义实例属性，而原型模式用于定义方法和共享属性。每个实例都会有自己的一份实例属性，但同时又共享着方法，最大限度的节省了内存。另外这种模式还支持传递初始参数。优点甚多。这种模式在ECMAScript中是使用最广泛、认同度最高的一种创建自定义对象的方法。")]),n._v(" "),a("h2",{attrs:{id:"动态原型模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态原型模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 动态原型模式")]),n._v(" "),a("p",[n._v("动态原型模式将所有信息封装在了构造函数中，而通过构造函数中初始化原型（仅第一个对象实例化时初始化原型），这个可以通过判断该方法是否有效而选择是否需要初始化原型。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function Blog(name, url) {\n  this.name = name;\n  this.url = url;\n\n  if (typeof this.alertInfo != 'function') {\n    // 这段代码只执行了一次\n    alert('exe time');\n    Blog.prototype.alertInfo = function() {\n      alert(thia.name + this.url);\n    }\n  }\n}\n\nvar blog = new Blog('wuyuchang', 'http://tools.jb51.net'),\n  blog2 = new Blog('wyc', 'http:***.com');\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br")])]),a("p",[n._v("可以看到上面的例子中只弹出一次窗，'exe time'，即当blog初始化时，这样做blog2就不在需要初始化原型，对于使用这种模式创建对象，可以算是perfect了。")])])},[],!1,null,null,null);s.default=e.exports}}]);