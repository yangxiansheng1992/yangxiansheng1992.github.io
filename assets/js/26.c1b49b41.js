(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{358:function(s,a,t){"use strict";t.r(a);var r=t(14),e=Object(r.a)({},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),t("blockquote",[t("p",[s._v("Web优化是多方面的，不仅可以通过JavaScript，CSS也是非常重要的部分。优化CSS需要一个多维的方法。虽然可以使用各种技术简化手写代码，但是手工检查框架代码是低效的。在这些情况下，使用自动化的minimiser效果会更好。下面的这些步骤将带领我们进入CSS优化的世界。虽然并不是每一个都适用于你的项目，但是一定要记住它们！")])]),s._v(" "),t("h2",{attrs:{id:"_1，合并css文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1，合并css文件","aria-hidden":"true"}},[s._v("#")]),s._v(" 1，合并css文件")]),s._v(" "),t("p",[s._v("首推的是合并css文件，如果页面加载10个css文件，每个文件1k，那么也要比只加载一个100k的css文件慢。")]),s._v(" "),t("h2",{attrs:{id:"_2-使用简写"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用简写","aria-hidden":"true"}},[s._v("#")]),s._v(" 2. 使用简写")]),s._v(" "),t("p",[s._v("简写可以使CSS文件更小。\n最快的CSS子句是一个永远不会被解析的子句。使用缩写子句，如下图所示的Margin写法，可以从根本上减少CSS文件的大小。这里只是举了个简单的例子，更多的速记形式大家可以通过谷歌“CSS速记”。")]),s._v(" "),t("div",{staticClass:"language-css line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-css"}},[t("code",[t("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".home")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v("margin-top")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("10px"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v("margin-right")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("20px"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v("margin-bottom")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("30px"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v("margin-left")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("40px"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".home")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v("margin")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("10px 20px 30px 40px"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("h2",{attrs:{id:"_3-查找并删除无用的css"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-查找并删除无用的css","aria-hidden":"true"}},[s._v("#")]),s._v(" 3. 查找并删除无用的CSS")]),s._v(" "),t("p",[s._v("删除不必要的部分 CSS，j 显然会加快网页的加载速度。谷歌的 Chrome 浏览器有这种开箱即用的功能。只需转到查看>开发人员>开发人员工具，并在最近的版本中打开 Sources 选项卡，然后打开命令菜单(Run command)(快捷键：Ctrl+shift+p)。然后，选择 Show Coverage，在 Coverage analysis 窗口中高亮显示当前页面上未使用的代码，打开谷歌浏览器开发都工具，在 Conlse 旁边更多选择 Coverage，就可以看到未使用的 CSS, 点击对应的项，高亮显示当前页面上未使用的代码，让你大开眼界：")]),s._v(" "),t("img",{staticStyle:{width:"100%",display:"block",margin:"0 auto"},attrs:{src:"/image/css/css-cover.jpg"}}),s._v(" "),t("br"),s._v(" "),t("img",{staticStyle:{width:"100%",display:"block",margin:"0 auto"},attrs:{src:"/image/css/css-cover1.jpg"}}),s._v(" "),t("h2",{attrs:{id:"_4-使用高效的方式清除冗余代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-使用高效的方式清除冗余代码","aria-hidden":"true"}},[s._v("#")]),s._v(" 4. 使用高效的方式清除冗余代码")]),s._v(" "),t("p",[s._v("在导航中逐行分析无用的代码听起来并不容易。Chrome的Web Performance Audit也能呈现类似的信息，但是使用起来更加高效。首先从工具栏打开它，通过选择View> Developer > Developer Tools >Audits 就可以运行它。运行完成后，将会弹出问题代码列表，你可以轻松获取冗余代码的信息。")]),s._v(" "),t("img",{staticStyle:{width:"100%",display:"block",margin:"0 auto"},attrs:{src:"/image/css/css-cover2.jpg"}}),s._v(" "),t("br"),s._v(" "),t("img",{staticStyle:{width:"100%",display:"block",margin:"0 auto"},attrs:{src:"/image/css/css-cover3.jpg"}}),s._v(" "),t("h2",{attrs:{id:"_5-注意这些问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-注意这些问题","aria-hidden":"true"}},[s._v("#")]),s._v(" 5. 注意这些问题")]),s._v(" "),t("p",[s._v("请记住，CSS的自动解析总是会导致一些莫名的错误。建议开发人员用缩小的CSS文件替换CSS文件后，对整个网站进行彻底的测试。因为，谁也不知道优化器会导致一些什么错误。")]),s._v(" "),t("h2",{attrs:{id:"_6-消除不需要的零和单位"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-消除不需要的零和单位","aria-hidden":"true"}},[s._v("#")]),s._v(" 6.消除不需要的零和单位")]),s._v(" "),t("p",[s._v("CSS支持多种单元和数字格式。这些单元和格式正好是值得优化的目标——可以删除小数点前后无实际意义的零，如下面的代码片段所示。此外，请记住，零始终是零，添加维度不会为包含的信息添加值。")]),s._v(" "),t("div",{staticClass:"language-css line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-css"}},[t("code",[t("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".home")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v("margin")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("0px"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("//结果为0就不要带单位\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v("margin")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("0"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h2",{attrs:{id:"_7-减少css嵌套，最好不要套三层以上。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-减少css嵌套，最好不要套三层以上。","aria-hidden":"true"}},[s._v("#")]),s._v(" 7.减少css嵌套，最好不要套三层以上。")]),s._v(" "),t("div",{staticClass:"language-css line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-css"}},[t("code",[t("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".home .box .child")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 这种嵌套层数不要超过三层 */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h2",{attrs:{id:"_8-不要在id选择器前面进行嵌套，"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-不要在id选择器前面进行嵌套，","aria-hidden":"true"}},[s._v("#")]),s._v(" 8.不要在ID选择器前面进行嵌套，")]),s._v(" "),t("p",[s._v("ID本来就是唯一的而且人家权值那么大，嵌套完全是浪费性能。")]),s._v(" "),t("h2",{attrs:{id:"_9-建立公共样式类，"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-建立公共样式类，","aria-hidden":"true"}},[s._v("#")]),s._v(" 9.建立公共样式类，")]),s._v(" "),t("p",[s._v("把相同样式提取出来作为公共类使用，比如我们常用的清除浮动等。")]),s._v(" "),t("h2",{attrs:{id:"_10-巧妙运用css的继承机制，如果父节点定义了，子节点就无需定义。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-巧妙运用css的继承机制，如果父节点定义了，子节点就无需定义。","aria-hidden":"true"}},[s._v("#")]),s._v(" 10.巧妙运用css的继承机制，如果父节点定义了，子节点就无需定义。")]),s._v(" "),t("h2",{attrs:{id:"_11-不用css表达式，"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-不用css表达式，","aria-hidden":"true"}},[s._v("#")]),s._v(" 11.不用css表达式，")]),s._v(" "),t("p",[s._v("表达式只是让你的代码显得更加炫酷，但是他对性能的浪费可能是超乎你的想象的。")]),s._v(" "),t("h2",{attrs:{id:"_12，精灵图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12，精灵图","aria-hidden":"true"}},[s._v("#")]),s._v(" 12，精灵图")]),s._v(" "),t("p",[s._v("cssSprite，合成所有icon图片，用宽高加上bacgroud-position的背景图方式显现出我们要的icon图，这是一种 十分实用的技巧，极大减少了http请求。")]),s._v(" "),t("h2",{attrs:{id:"_13，css缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13，css缓存","aria-hidden":"true"}},[s._v("#")]),s._v(" 13，css缓存")]),s._v(" "),t("h2",{attrs:{id:"_14-不要使用-import"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-不要使用-import","aria-hidden":"true"}},[s._v("#")]),s._v(" 14.不要使用@import")]),s._v(" "),t("ul",[t("li",[s._v("1.使用@import引入CSS会影响浏览器的并行下载。使用@import引用的CSS文件只有在引用它的那个css文件被下载、解析之后，浏览器才会知道还有另外一个css需要下载，这时才去下载，然后下载后开始解析、构建render tree等一系列操作。这就导致浏览器无法并行下载所需的样式文件。")]),s._v(" "),t("li",[s._v("2.多个@import会导致下载顺序紊乱。在IE中，@import会引发资源文件的下载顺序被打乱，即排列在@import后面的js文件先于@import下载，并且打乱甚至破坏@import自身的并行下载")]),s._v(" "),t("li",[s._v("3.@import引入的样式不能被js修改")])]),s._v(" "),t("h2",{attrs:{id:"_15-少用性能昂贵属性；"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15-少用性能昂贵属性；","aria-hidden":"true"}},[s._v("#")]),s._v(" 15.少用性能昂贵属性；")]),s._v(" "),t("p",[s._v("box-shadow/border-radius/filter/透明度/:nth-child等")])])},[],!1,null,null,null);a.default=e.exports}}]);