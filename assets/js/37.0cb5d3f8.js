(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{369:function(s,n,a){"use strict";a.r(n);var e=a(14),t=Object(e.a)({},function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"函数式编程初探"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数式编程初探","aria-hidden":"true"}},[s._v("#")]),s._v(" 函数式编程初探")]),s._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[s._v("前言")]),s._v(" "),a("p",[s._v('继"面向对象编程"之后，"函数式编程"会成为另一种编程的主流范式（paradigm），也就是如何编写程序的方法论。那什么是编程范式呢？这里我引用一段来自维基百科关于编程范式的说明贴在下面')])]),s._v(" "),a("blockquote",[a("p",[s._v("编程范例是一种根据编程语言的特性对编程语言进行分类的方法。语言可以分为多种范例。一些范例主要涉及对语言执行模型的影响，例如允许副作用，或者操作序列是否由执行模型定义。其他范例主要关注代码的组织方式，例如将代码分组为单元以及代码修改的状态。还有一些人主要关注语法和语法的风格。"),a("br"),s._v("\n常见的编程范例包括：")])]),s._v(" "),a("ul",[a("li",[s._v("程序员指示机器如何改变其状态的必要性，\n"),a("ul",[a("li",[s._v("程序这组指令转换成程序，")]),s._v(" "),a("li",[s._v("面向对象的，它将指令与它们所处的状态部分组合在一起，")])])]),s._v(" "),a("li",[s._v("声明中，程序员只声明了期望的结果的性质，但不知道如何计算它\n"),a("ul",[a("li",[s._v("功能，其中所期望的结果被声明为一系列功能应用的价值，")]),s._v(" "),a("li",[s._v("将所需结果声明为关于事实和规则系统的问题的答案的逻辑，")]),s._v(" "),a("li",[s._v("数学，其中所需结果被声明为优化问题的解决方案")])])])]),s._v(" "),a("blockquote",[a("p",[s._v("编程范式从概念上来讲指的是编程的基本风格和典范模式。"),a("br"),s._v("\n换句话说其实就是程序员对于如何使用编程来解决问题的世界观和方法论。"),a("br"),s._v("\n如果把一门编程语言比作兵器，它的语法、工具和技巧等是招法，那么它采用的编程范式也就是是内功心法。")])]),s._v(" "),a("p",[a("strong",[s._v("ok,理论就简单的说这些，有一点理解就好，那么们来窥探这一方世界吧，let's go")])]),s._v(" "),a("h3",{attrs:{id:"高阶函数的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高阶函数的定义","aria-hidden":"true"}},[s._v("#")]),s._v(" 高阶函数的定义")]),s._v(" "),a("hr"),s._v("\n要是想要弄明白函数式编程首先要明白什么是高阶函数。\n"),a("blockquote",[a("p",[s._v("函数可以作为参数被传递 "),a("br"),s._v("\n函数可以作为返回值输出")])]),s._v(" "),a("p",[s._v("明白这个初步定义后，那我们来看一点小例子：")]),s._v(" "),a("p",[a("strong",[s._v("使用ES6自带的高阶函数来编写代码")]),a("br"),s._v("\n假如，我们有这样一个数组：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const classA = [\n    {\n        name: '张三',\n        age: 17\n    },\n    {\n        name: '李四',\n        age: 15\n    },\n    {\n        name: '王五',\n        age: 16\n    },\n]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("有一个需求，是找出班级中16岁年纪的学生，我们使用低阶函数做筛选是这样的：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let student = [];\nfor (let i = 0; i < classA.length; i++) {\n    if (classA[i].age === 16) {\n        student.push(class[i])\n    }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("使用高阶函数是这样的：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const student = classA.filter( item => item.age === 16 )\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("那么使用这样的高阶函数有什么好处呢，有"),a("strong",[s._v("两点:")])]),s._v(" "),a("ul",[a("li",[s._v("第一，同等复杂度的代码，高阶函数能让实现更加简单")]),s._v(" "),a("li",[s._v("第二，高阶函数能够非常方便的拆分逻辑")])]),s._v(" "),a("p",[s._v("比如说，这样一个筛选学生的函数，可以拆成两部分：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const isAge = item => item.age === 16;\nconst result = classA.filter(isAge);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("这样拆分后，逻辑就分为了两个部分，第一部分是判断年纪的函数，第二部分是筛选结果的函数。")]),s._v(" "),a("p",[s._v("如果，以后我们的需求有了变化，不筛选学生年纪了，改成了筛选学生姓名，或者一些其它的东西，那么我们只需要改动判断年纪的函数就行了，筛选结果的函数不变。")]),s._v(" "),a("p",[s._v("嗯，可能有人会说，这太简单了，那么，稍微来点难度的东西！")]),s._v(" "),a("p",[s._v("假如，我们有这样一个数组:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("[\n    {\n        name: '张三',\n        age: '26',\n        price: '1000'\n    },\n    {\n        name: '李四',\n        age: '25',\n        price: '3655'\n    },\n    {\n        name: '王五',\n        age: '30',\n        price: '8888'\n    },\n]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("我们要实现上面的功能，使用高阶函数来做转换：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const result = array.reduce((value, item, index) => {\n  value[index] = {\n    name: item[0],\n    age: item[1],\n    price: item[2]\n  };\n  return value;\n}, []);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("这里我们使用了ES6的高阶函数reduce，具体相关介绍可以去看凹凸实验室写的"),a("a",{attrs:{href:"https://aotu.io/notes/2016/04/14/js-reduce/index.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("JavaScript中reduce()方法不完全指南"),a("OutboundLink")],1),s._v(";")]),s._v(" "),a("p",[s._v("ok，到了这里，已经对函数式编程有了些简单的概念了，我所理解的函数式编程是：")]),s._v(" "),a("blockquote",[a("p",[s._v("编写代码的时候，函数式编程更多的是从声明式的方法，而传统的编程更多的是命令式的方法。例如，上面的筛选学生年纪，传统的编程思想是，我创建了什么，我循环了什么，我判断了什么，得出了什么结果；函数式编程的思想是，我声明了一个筛选的函数，我声明了一个判断的函数，我把这两个函数结合起来，得出了一个结果。")])]),s._v(" "),a("h3",{attrs:{id:"从函数式编程到节流函数；"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从函数式编程到节流函数；","aria-hidden":"true"}},[s._v("#")]),s._v(" 从函数式编程到节流函数；")]),s._v(" "),a("p",[s._v("节流函数说白了，就是一个控制事件触发频率的函数，以前可以一秒内，无限次触发，现在限制成500毫秒触发一次，在短时间内只触发一次，达到优化的目的，如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("throttle(fn, wait=500) {\n    if (typeof fn != \"function\") {\n        // 必须传入函数\n        throw new TypeError(\"Expected a function\")\n    }\n    // 定时器\n    let timer,\n    // 是否是第一次调用\n    firstTime = true;\n    \n    // 这里不能用箭头函数，是为了绑定上下文\n    return function (...args) {\n        // 第一次\n        if (firstTime) {\n            firstTime = false;\n            fn.apply(this,args);\n        }\n        \n        if (timer) {\n            return;\n        }else {\n            timer = setTimeout(() => {\n                clearTimeout(timer);\n                timer = null;\n                fn.apply(this, args);\n            },wait)\n        }\n\n    }\n}\n\n// 单独使用，限制快速连续不停的点击，按钮只会有规律的每500ms点击有效\nbutton.addEventListener('click', throttle(() => {\n    console.log('hhh')\n}))\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br")])]),a("p",[s._v("写好了这样一个高阶函数后，我们就可以在各处调用了，比如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 有一个点击增加的功能，但是要求最少过了1秒才能增加一次，就可以\nconst add = x => x++;\nthrottle(add,1000);\n\n// 又有了一个减少的功能，但是要求最少2秒减少一次\nconst cutDown = x => x--;\nthrottle(cutDown,2000);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("到这里已经明白了什么是高阶函数，但是还不够，还需要了解一些函数式编程的重要概念")]),s._v(" "),a("h3",{attrs:{id:"纯函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#纯函数","aria-hidden":"true"}},[s._v("#")]),s._v(" 纯函数")]),s._v(" "),a("p",[s._v("在函数式编程的概念中，还有一个重要的概念是纯函数，那么什么是纯函数呢?\n在此，我们先了解一下什么叫"),a("strong",[s._v("数学函数")]),s._v("；")]),s._v(" "),a("blockquote",[a("p",[s._v("一般的，在一个变化过程中，假设有两个变量 x、y，如果对于任意一个 x 都有唯一确定的一个y和它对应，那么就称 x 是自变量，y 是 x 的函数。x 的取值范围叫做这个函数的定义域，相应 y 的取值范围叫做函数的值域。")])]),s._v(" "),a("p",[s._v("以上定义，在初中数学咱们都应该学过...")]),s._v(" "),a("p",[s._v("换句话说，函数只是两种数值之间的关系：输入和输出。")]),s._v(" "),a("p",[s._v("尽管每个输入都只会有一个输出，但不同的输入却可以有相同的输出。下图展示了一个合法的从 x 到 y 的函数关系；\n"),a("img",{staticStyle:{width:"50%",display:"block",margin:"0 auto"},attrs:{src:"/image/jichu/chunhanshu1.jpg"}}),s._v("\n与之相反，下面这张图表展示的就不是一种函数关系，因为输入值 5 指向了多个输出：\n"),a("img",{staticStyle:{width:"50%",display:"block",margin:"0 auto"},attrs:{src:"/image/jichu/chunhanshu2.jpg"}})]),s._v(" "),a("p",[a("strong",[s._v("那回过头来看看什么叫纯函数？")])]),s._v(" "),a("blockquote",[a("p",[s._v("纯函数是这样一种函数，即相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用。\n他的重点在于“相同的输入，永远会得到相同的输出”，后面所说的副作用也是为了满足这一点。")])]),s._v(" "),a("p",[s._v("根据定义可以看出纯函数其实就是数学函数，即表示从输入的参数到输出结果的映射。")]),s._v(" "),a("p",[s._v("而没有副作用的纯函数显然都是引用透明的。")]),s._v(" "),a("blockquote",[a("p",[s._v("引用透明性（Referential Transparency）指的是，如果一段代码在不改变整个程序行为的前提下，可以替换成它的执行结果。")])]),s._v(" "),a("p",[s._v("说了半天，什么是副作用（Side Effects）？")]),s._v(" "),a("blockquote",[a("p",[s._v("副作用是在计算的过程中，系统状态的一种变化，或者与外部世界进行的可观察的交互。")])]),s._v(" "),a("p",[s._v("副作用可能包含，但不限于以下行为：")]),s._v(" "),a("ul",[a("li",[s._v("更改文件系统")]),s._v(" "),a("li",[s._v("往数据库中插入记录")]),s._v(" "),a("li",[s._v("发送一个 http 请求")]),s._v(" "),a("li",[s._v("改变数据")]),s._v(" "),a("li",[s._v("打印 log")]),s._v(" "),a("li",[s._v("获取用户输入")]),s._v(" "),a("li",[s._v("DOM 查询")]),s._v(" "),a("li",[s._v("访问系统状态")]),s._v(" "),a("li",[s._v("...")])]),s._v(" "),a("blockquote",[a("p",[s._v("只要是跟函数外部环境发生的交互就都是副作用——这一点可能会让你怀疑无副作用编程的可行性。函数式编程的哲学就是假定副作用是造成不正当行为的主要原因。")])]),s._v(" "),a("p",[s._v("当然这并不是说，要禁止使用一切副作用，而是说，要让它们在可控的范围内发生。在后面讲到函子（functor）和单子（monad）的时候我们会学习如何控制它们。")]),s._v(" "),a("p",[a("strong",[s._v("纯函数的好处都有啥")])]),s._v(" "),a("blockquote",[a("p",[s._v("面向对象语言的问题是，它们永远都要随身携带那些隐式的环境。你只需要一个香蕉，但却得到一个拿着香蕉的大猩猩...以及整个丛林"),a("br"),s._v("\nby Erlang 作者：Joe Armstrong")])]),s._v(" "),a("p",[s._v("所以使用纯函数将会有以下好处：")]),s._v(" "),a("ul",[a("li",[s._v("可缓存性（Cacheable）")]),s._v(" "),a("li",[s._v("可移植性／自文档化（Portable / Self-Documenting）")]),s._v(" "),a("li",[s._v("可测试性（Testable）")]),s._v(" "),a("li",[s._v("合理性（Reasonable）")]),s._v(" "),a("li",[s._v("并行代码（Parallel Code）")])]),s._v(" "),a("p",[a("strong",[s._v("为什么要避免改变状态和可变数据？")])]),s._v(" "),a("blockquote",[a("p",[s._v("Shared mutable state is the root of all evil"),a("br"),s._v("\n共享可变状态是万恶之源"),a("br"),s._v("\nby Pete Hunt")])]),s._v(" "),a("p",[s._v("好了好了，先暂时告别理论；来用代码解释：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const z = 10;\nadd(x, y) {\n    return x + y;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("上面的add函数就是一个纯函数，它读取x和y两个参数的值，返回它们的和，并且不会受到全局的z变量的影响")]),s._v(" "),a("p",[s._v("把这个函数改一下")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const z = 10;\nadd(x, y) {\n    return x + y + z;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("这个函数就变成了不纯的函数了，因为它返回的值会受到全局的z的影响")]),s._v(" "),a("p",[s._v("换句话说，这个函数会被外部环境影响")]),s._v(" "),a("p",[s._v("so，我们就得出了第一个判断是否纯函数的重要依据")]),s._v(" "),a("blockquote",[a("p",[s._v("1、纯函数不会受到外部环境的影响")])]),s._v(" "),a("p",[s._v("再用splice和slice来解释一下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var xs = [1,2,3,4,5];\n\n// 纯的\nxs.slice(0,3);\n//=> [1,2,3]\n\nxs.slice(0,3);\n//=> [1,2,3]\n\nxs.slice(0,3);\n//=> [1,2,3]\n\n\n// 不纯的\nxs.splice(0,3);\n//=> [1,2,3]\n\nxs.splice(0,3);\n//=> [4,5]\n\nxs.splice(0,3);\n//=> []\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("p",[a("span",{staticStyle:{color:"red"}},[a("strong",[s._v("slice")])]),s._v("收到同样的参数，每次返回相同的值，所以是纯函数")]),s._v(" "),a("p",[a("span",{staticStyle:{color:"red"}},[a("strong",[s._v("splice")])]),s._v("收到同样的参数，每次返回不同的值，所以不是纯函数")]),s._v(" "),a("p",[s._v("so，我们就得出了第二个判断是否纯函数的重要依据:")]),s._v(" "),a("blockquote",[a("p",[s._v("2、纯函数相同的输入，永远会得到相同的输出")])]),s._v(" "),a("p",[s._v("所以回到上面对于纯函数的定义，纯函数是:")]),s._v(" "),a("blockquote",[a("p",[a("span",{staticStyle:{color:"red"}},[a("strong",[s._v("纯函数是这样一种函数，即相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用")])])])]),s._v(" "),a("p",[a("strong",[s._v("使用纯函数能够极大的降低编程的复杂度，但是不合理的使用，为了抽象而去抽象，反而会使代码变得非常难以理解。")])]),s._v(" "),a("h3",{attrs:{id:"柯里化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#柯里化","aria-hidden":"true"}},[s._v("#")]),s._v(" 柯里化")]),s._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[s._v("概念")]),s._v(" "),a("p",[s._v("柯里化的概念很简单：只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const add = x => y => x + y;\nadd(1)(2);\n// => 3\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("上面的例子，就是一个很典型的柯里化函数，在我们第一次调用的时候，接收了第一次传入的参数（用闭包记住），返回了一个新的函数；在第二次调用的时候，接收第二次传入的参数，并且和第一次传入的函数相加，返回它们的和。")]),s._v(" "),a("p",[s._v("这个例子说明了柯里化的一个特征，或者说是一个基础，即柯里化函数有延迟求值的特殊性，而这种特殊性又需要用到一些手段来实现。")]),s._v(" "),a("p",[s._v("运用上面的思想编写一个的柯里化函数")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 创建柯里化函数，保存了第一次传入的参数和函数，返回值\n//是一个函数并且接收第二次传入参数，同时调用传入的函数进行计算\ncurrying (fn, ...args1) {\n    return (...args2) => {\n        return fn(...args1, ...args2)\n    }\n}\n\n// 定义一个一般函数\nconst add = (x, y) => x + y;\n\n// 使用\nconst increment = currying(add, 1);\nconsole.log(increment(2));\nconst addTen = currying(add, 10);\nconsole.log(addTen(2));\n\n// => 3\n// => 12\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("这个列子还有点小问题，即返回的值没有自动柯里化，可以改造下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("currying(fn, ...args1) {\n  // '判断传入的参数是否满足传入函数需要的参数，比如说add函数需要两个参数相加，\n  //那么判断是否传入了两个参数，满足调用传入函数计算结果'\n  if (args1.length >= fn.length) {\n    console.log(args1, '--1--');\n    return fn(...args1);\n  }\n  // '不满足返回一个新的函数，继续调用柯里化函数，传入保存的第一次传入的函数，\n  //传入保存的第一次传入的参数，传入第二次传入的参数，继续上面的判断逻辑，返回计算结果'\n  return (...args2) => {\n    console.log(args2, '--2--');\n    return currying(fn, ...args1, ...args2);\n  };\n},\n\n// 定义一个一般函数\nconst add = (x, y) => x + y;\n\n// 使用\nconst increment = currying(add, 1);\nconsole.log(increment(2));\nconst addTen = currying(add, 10);\nconsole.log(addTen(2));\n\n// => [2] --2--\n// => [1,2] --1--\n// => 3\n// => [2] --2--\n// => [10,2] --1--\n// => 12\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br")])]),a("p",[s._v("函数在js中是一等公民，它和其它对象，或者其它数据没有什么区别，可以存在数组，存在对象，赋值给变量，当作参数传来传去，所以函数也有下标属性，用上面的例子证明一下")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const add = (x, y) => x + y;\nconsole.log(add.length)\n// => 2\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("在ES6中，...是扩展运算符，他的使用是这样的")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 放在函数作为单独参数，会把一个数组变成参数序列，比如上面例子中的数组[1,2]变成了参数x=1,y=2\nfn(...args1)\n\n// 放在函数中作为第二个参数，会把传入的值变成一个数组，\n//如果传入的是一个数组那么还是数组，传入一个对象，会变成一个数组对象\nfunction currying(fn,...x) {\n\tconsole.log(x)\n}\ncurrying(0,1)\n// => [1]\n\n// 放在回调函数中作为第二个和第三个参数\n// 第一次调用会返回一个函数，会在闭包里存贮值，\n//第二次调用会把闭包里的值和第二次参数里的值合并成数组\nreturn currying(fn, ...args1, ...args2);\n// => [1,2]\n\n// 但是单独在函数中这么使用会报错\nfunction currying(fn,...x,...y) {\n\tconsole.log(x)\n}\ncurrying(0,1,2)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("p",[s._v("理解了这些，上面的例子就很好懂了。")]),s._v(" "),a("p",[s._v("柯里化函数比较重要的思想是：")]),s._v(" "),a("blockquote",[a("p",[a("span",{staticStyle:{color:"red"}},[a("strong",[s._v("多次判断传入的参数是否满足计算需求，满足，返回计算结果，如果不满足，继续返回一个新的柯里化函数")])])])]),s._v(" "),a("p",[s._v("上面的柯里化函数还可以继续优化，比如说，this绑定啊，特殊的变量占位符啊，等等，这样的工作，一些库，比如说ramda已经实现，可以去看它的源代码里面是怎样实现的，重点还是要明白柯里化函数是怎么一回事。")]),s._v(" "),a("h3",{attrs:{id:"代码组合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码组合","aria-hidden":"true"}},[s._v("#")]),s._v(" 代码组合")]),s._v(" "),a("p",[s._v("首先，先写一个简单的组合函数：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const compose = (f, g) => x => f(g(x));\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这个组合函数接收两个函数当作参数，然后返回一个新的函数，x是两个函数之间都要使用的值，比如说：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 我们要实现一个给字符串全部变成大写，然后加上个感叹号的功能，只需要定义两个函数，然后组合一下\nconst toUpperCase = x => x.toUpperCase();\nconst exclaim = x => `${x}!`;\nconst shout = compose(exclaim, toUpperCase);\n\nshout('hello world')\n// => HELLO WORLD!\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("注意：组合函数里面，g函数比f函数先执行，所以在组合里面，是从右往左执行的，也就是说，要把先执行的函数放在组合函数的右边")]),s._v(" "),a("p",[s._v("这个组合函数还是有点问题，它只能接收2个参数，我们来稍微改造下，让它变得强大点：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const compose = (...fns) => (...args) => fns.reduceRight((res, fn) => [fn.call(null, ...res)], args)[0];\n\n// 使用，实现一个功能，字符串变成大写，加上个感叹号，还要截取一部分，再在前面加上注释\nconst toUpperCase = x => x.toUpperCase();\nconst exclaim = x => `${x}!`;\nconst head = x => `slice is: ${x}`;\nconst reverse = x => x.slice(0, 7);\n\nconst shout = compose(exclaim, toUpperCase, head, reverse)\nshout('my name is maya')\n// => SLICE IS: MY NAME!\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[a("strong",[s._v("组合的原理其实就是数学中的结合律：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("(a + b) + c  =  a + (b + c)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("so，在组合中你可以这样")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 第一种\nconst one = compose(exclaim, toUpperCase)\nconst shout = compose(one, head, reverse)\nshout('my name is maya')\n// => SLICE IS: MY NAME!\n\n// 第二种\nconst two = compose(toUpperCase, head)\nconst shout = compose(exclaim, two, reverse)\nshout('my name is maya')\n// => SLICE IS: MY NAME!\n\n// 第三种\nconst three = compose(head, reverse)\nconst shout = compose(exclaim, toUpperCase, three)\nshout('my name is maya')\n// => SLICE IS: MY NAME!\n\n...\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("so，到了这里，我对组合的理解是：")]),s._v(" "),a("blockquote",[a("p",[s._v("组合是什么，组合就是运用了数学里的结合律，像是搭积木一样，把不同的函数联系起来，让数据在里面流动")])]),s._v(" "),a("p",[s._v("在各种库里面都有组合的函数，lodash，underscore，ramda等等，比如在underscore里面，组合是这样的：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function() {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  };\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("h3",{attrs:{id:"结合使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结合使用","aria-hidden":"true"}},[s._v("#")]),s._v(" 结合使用")]),s._v(" "),a("p",[s._v("嗯，到了这里，已经初步了解了函数式编程的概念了，那么我们怎么使用函数式编程的方式写代码呢，举个例子：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 伪代码，思路\n// 比如说，我们请求后台拿到了一个数据，然后我们需要筛选几次这个数据, 取出里面的一部分，并且排序\n\n// 数据\nconst res = {\n    status: 200,\n    data: [\n        {\n            id: xxx,\n            name: xxx,\n            time: xxx,\n            content: xxx,\n            created: xxx\n        },\n        ...\n    ]\n}\n\n// 封装的请求函数\nconst http = xxx;\n\n// '传统写法是这样的'\nhttp.post\n    .then(res => 拿到数据)\n    .then(res => 做出筛选)\n    .then(res => 做出筛选)\n    .then(res => 取出一部分)\n    .then(res => 排序)\n    \n// '函数式编程是这样的'\n// 声明一个筛选函数\nconst a = curry()\n// 声明一个取出函数\nconst b = curry()\n// 声明一个排序函数\nconst c = curry()\n// 组合起来\nconst shout = compose(c, b, a)\n// 使用\nshout(http.post)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br")])]),a("h3",{attrs:{id:"如何在项目中正式使用函数式编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何在项目中正式使用函数式编程","aria-hidden":"true"}},[s._v("#")]),s._v(" 如何在项目中正式使用函数式编程")]),s._v(" "),a("p",[s._v("我觉得，想要在项目里面正式使用函数式编程有这样几个步骤：")]),s._v(" "),a("ul",[a("li",[s._v("1、先尝试使用ES6自带的高阶函数")]),s._v(" "),a("li",[s._v("2、熟悉了ES6自带的高阶函数后，可以自己尝试写几个高阶函数")]),s._v(" "),a("li",[s._v("3、在这个过程中，尽量使用纯函数编写代码")]),s._v(" "),a("li",[s._v("4、对函数式编程有所了解之后，尝试使用类似ramda的库来编写代码")]),s._v(" "),a("li",[s._v("5、在使用ramda的过程中，可以尝试研究它的源代码")]),s._v(" "),a("li",[s._v("6、尝试编写自己的库，柯里化函数，组合函数等")])]),s._v(" "),a("p",[s._v("当然了，这个只是我自己的理解，我在实际项目中也没有完全的使用函数式编程开发，我的开发原则是：")]),s._v(" "),a("blockquote",[a("p",[s._v("不要为了函数式而选择函数式编程。如果函数式编程能够帮助你，能够提升项目的效率，质量，可以使用；如果不能，那么不用；如果对函数式编程还不太熟，比如我这样的，偶尔使用")])]),s._v(" "),a("h3",{attrs:{id:"扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩展","aria-hidden":"true"}},[s._v("#")]),s._v(" 扩展")]),s._v(" "),a("p",[s._v("函数式编程是在范畴论的基础上发展而来的，而关于函数式编程和范畴论的关系，阮一峰大佬给出了一个很好的说明，在这里复制粘贴下他的文章"),a("br"),s._v(" "),a("strong",[s._v("本质上，函数式编程只是范畴论的运算方法，跟数理逻辑、微积分、行列式是同一类东西，都是数学方法，只是碰巧它能用来写程序")]),a("br"),s._v("\n所以，你明白了吗，为什么函数式编程要求函数必须是纯的，不能有副作用？因为它是一种数学运算，原始目的就是求值，不做其他事情，否则就无法满足函数运算法则了。")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.im/post/5d1185846fb9a07ed2247b42",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考"),a("OutboundLink")],1),s._v(";")])])},[],!1,null,null,null);n.default=t.exports}}]);